This question is nowhere similar to previous question
It has interface like this
amritesh@MyUbuntu:~/week8/week-8$ ./rev5-checker
Tell me something interesting:
we are fsociety
That doesn't look right! Go reverse some more!

now let's objdump it to get the info of the functions

amritesh@MyUbuntu:~/week8/week-8$ objdump -d rev5-checker -M intel

0804871a <main>:
 804871a:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 804871e:	83 e4 f0             	and    esp,0xfffffff0
 8048721:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 8048724:	55                   	push   ebp
 8048725:	89 e5                	mov    ebp,esp
 8048727:	51                   	push   ecx
 8048728:	83 ec 34             	sub    esp,0x34
 804872b:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 8048731:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 8048734:	31 c0                	xor    eax,eax
 8048736:	e8 80 fe ff ff       	call   80485bb <init>
 804873b:	83 ec 0c             	sub    esp,0xc
 804873e:	68 40 89 04 08       	push   0x8048940
 8048743:	e8 08 fd ff ff       	call   8048450 <puts@plt>
 8048748:	83 c4 10             	add    esp,0x10
 804874b:	a1 40 a0 04 08       	mov    eax,ds:0x804a040
 8048750:	83 ec 04             	sub    esp,0x4
 8048753:	50                   	push   eax
 8048754:	6a 1f                	push   0x1f
 8048756:	8d 45 d4             	lea    eax,[ebp-0x2c]
 8048759:	50                   	push   eax
 804875a:	e8 d1 fc ff ff       	call   8048430 <fgets@plt>
 804875f:	83 c4 10             	add    esp,0x10
 8048762:	83 ec 08             	sub    esp,0x8
 8048765:	6a 0a                	push   0xa
 8048767:	8d 45 d4             	lea    eax,[ebp-0x2c]
 804876a:	50                   	push   eax
 804876b:	e8 f0 fc ff ff       	call   8048460 <strchr@plt>
 8048770:	83 c4 10             	add    esp,0x10
 8048773:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
 8048776:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
 804877a:	74 06                	je     8048782 <main+0x68>
 804877c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
 804877f:	c6 00 00             	mov    BYTE PTR [eax],0x0
 8048782:	83 ec 0c             	sub    esp,0xc
 8048785:	8d 45 d4             	lea    eax,[ebp-0x2c]
 8048788:	50                   	push   eax
 8048789:	e8 d3 fe ff ff       	call   8048661 <check>
 804878e:	83 c4 10             	add    esp,0x10
 8048791:	84 c0                	test   al,al
 8048793:	74 07                	je     804879c <main+0x82>
 8048795:	e8 3e fe ff ff       	call   80485d8 <give_flag>
 804879a:	eb 10                	jmp    80487ac <main+0x92>
 804879c:	83 ec 0c             	sub    esp,0xc
 804879f:	68 60 89 04 08       	push   0x8048960
 80487a4:	e8 a7 fc ff ff       	call   8048450 <puts@plt>
 80487a9:	83 c4 10             	add    esp,0x10
 80487ac:	b8 00 00 00 00       	mov    eax,0x0
 80487b1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
 80487b4:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14
 80487bb:	74 05                	je     80487c2 <main+0xa8>
 80487bd:	e8 7e fc ff ff       	call   8048440 <__stack_chk_fail@plt>
 80487c2:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
 80487c5:	c9                   	leave
 80487c6:	8d 61 fc             	lea    esp,[ecx-0x4]
 80487c9:	c3                   	ret
 80487ca:	66 90                	xchg   ax,ax
 80487cc:	66 90                	xchg   ax,ax
 80487ce:	66 90                	xchg   ax,ax


Aahhh.. too mmuch information
let's start

Initally it prints the basic info like enter the follwing stuff
then it calls fgets function to take the input

now there is variable which is declared and compared with 0
8048773:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
8048776:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0

couldn't understand what this says. maybe it's a compilers extra stuffs

moving next, we see there is call of check function
8048789:	e8 d3 fe ff ff       	call   8048661 <check>

now what check function returns is being compared with 0
8048791:	84 c0                	test   al,al

if it is not equal then there is function call of give_flag
8048793:	74 07                	je     804879c <main+0x82>
8048795:	e8 3e fe ff ff       	call   80485d8 <give_flag>

so basically we have to make check function return anything else than 0

we can bypass check function by changing the value of registers 
but we need to find the key
so let's get into the check function

08048661 <check>:
 8048661:	55                   	push   ebp
 8048662:	89 e5                	mov    ebp,esp
 8048664:	83 ec 18             	sub    esp,0x18
 8048667:	83 ec 0c             	sub    esp,0xc
 804866a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 804866d:	e8 fe fd ff ff       	call   8048470 <strlen@plt>
 8048672:	83 c4 10             	add    esp,0x10
 8048675:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
 8048678:	83 7d f0 13          	cmp    DWORD PTR [ebp-0x10],0x13
 804867c:	77 0a                	ja     8048688 <check+0x27>
 804867e:	b8 00 00 00 00       	mov    eax,0x0
 8048683:	e9 90 00 00 00       	jmp    8048718 <check+0xb7>
 8048688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804868b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 804868e:	3c 61                	cmp    al,0x61
 8048690:	74 07                	je     8048699 <check+0x38>
 8048692:	b8 00 00 00 00       	mov    eax,0x0
 8048697:	eb 7f                	jmp    8048718 <check+0xb7>
 8048699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804869c:	83 c0 01             	add    eax,0x1
 804869f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486a2:	3c 71                	cmp    al,0x71
 80486a4:	74 07                	je     80486ad <check+0x4c>
 80486a6:	b8 00 00 00 00       	mov    eax,0x0
 80486ab:	eb 6b                	jmp    8048718 <check+0xb7>
 80486ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80486b0:	83 c0 02             	add    eax,0x2
 80486b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486b6:	3c 75                	cmp    al,0x75
 80486b8:	74 07                	je     80486c1 <check+0x60>
 80486ba:	b8 00 00 00 00       	mov    eax,0x0
 80486bf:	eb 57                	jmp    8048718 <check+0xb7>
 80486c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80486c4:	83 c0 03             	add    eax,0x3
 80486c7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486ca:	3c 61                	cmp    al,0x61
 80486cc:	74 07                	je     80486d5 <check+0x74>
 80486ce:	b8 00 00 00 00       	mov    eax,0x0
 80486d3:	eb 43                	jmp    8048718 <check+0xb7>
 80486d5:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
 80486d9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
 80486e0:	eb 29                	jmp    804870b <check+0xaa>
 80486e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 80486e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80486e8:	01 d0                	add    eax,edx
 80486ea:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 80486ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
 80486f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 80486f3:	01 c8                	add    eax,ecx
 80486f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486f8:	38 c2                	cmp    dl,al
 80486fa:	74 07                	je     8048703 <check+0xa2>
 80486fc:	b8 00 00 00 00       	mov    eax,0x0
 8048701:	eb 15                	jmp    8048718 <check+0xb7>
 8048703:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
 8048707:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
 804870b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 804870e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
 8048711:	76 cf                	jbe    80486e2 <check+0x81>
 8048713:	b8 01 00 00 00       	mov    eax,0x1
 8048718:	c9                   	leave
 8048719:	c3                   	ret


again so much of code...

first there is a variable which contains the string length of argument
 804866a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 804866d:	e8 fe fd ff ff       	call   8048470 <strlen@plt>

then string length is being compared with 0x13(13)
8048678:	83 7d f0 13          	cmp    DWORD PTR [ebp-0x10],0x13

I noted that
[ebp+0x8] contains the string
and [ebp-0x10] contains string length

so if string length is less than 13 it is going to return 0 from check function
804867c:	77 0a                	ja     8048688 <check+0x27>
804867e:	b8 00 00 00 00       	mov    eax,0x0
8048683:	e9 90 00 00 00       	jmp    8048718 <check+0xb7>  //it is pointing to leave

and we don't want that 
so **point to be noted that string should be greater than 13
now
it's comparing the argument with 0x61(which is 'a')
 8048688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 804868b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 804868e:	3c 61                	cmp    al,0x61 // 'a'

if it's not equal to 'a' then it is going to return 0
but initially said that length of string is greater than 13 
oohhh..
when I saw some next set of codes(took me around 10hrs to understand)  then I got to know that first character must be 'a'
and then 
2nd must be 'q'
 804869c:	83 c0 01             	add    eax,0x1 //index 1
 804869f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486a2:	3c 71                	cmp    al,0x71 // 'q'

3rd must be 'u'
 80486b0:	83 c0 02             	add    eax,0x2 //index 2
 80486b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486b6:	3c 75                	cmp    al,0x75  // 'u'

4th must be 'a'
 80486c4:	83 c0 03             	add    eax,0x3 // //index 3
 80486c7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 80486ca:	3c 61                	cmp    al,0x61 // 'a'

so till now we got info that string will start with 'aqua' and should be greater than 13
now next

I saw that length is now decremented
 80486d5:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1 // decremented by 1

and there is one more variable declared that is [ebp-0xc] and initialised to 0
80486d9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0

okkkay.. 
after understanding some next set of codes(again took me around 3 hrs to understand)  I concluded that it is a loop
and the above variable declared is counter let's change it's name to i(usual name)

 80486d9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
 80486e0:	eb 29                	jmp    804870b <check+0xaa>
 the above both declared the variable and jumped to comparing

and below codes gives the information like
after every loop length is decremented by 1 and i is incremented by 1

 8048703:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1 // length ++
 8048707:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1 // i--
 804870b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 804870e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10] // if true jump to above codes
 8048711:	76 cf                	jbe    80486e2 <check+0x81>


now what is running inside of loop 
 
 80486e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 80486e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80486e8:	01 d0                	add    eax,edx  // it represents address of i(counter)
 80486ea:	0f b6 10             	movzx  edx,BYTE PTR [eax] // it contains string at i index (dl)
 80486ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
 80486f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 80486f3:	01 c8                	add    eax,ecx // it represents address at nth index(if we take length as n)
 80486f5:	0f b6 00             	movzx  eax,BYTE PTR [eax] // it contains string at nth index (al)
 80486f8:	38 c2                	cmp    dl,al  // now string at i and string at n is being compared
 80486fa:	74 07                	je     8048703 <check+0xa2> // if it is equal then loop continues

 so basically what code says is that
 string at ith position is equal to string at nth position then
 continue the loop
 so it is the case of palindrome

 now what after the loop
 actually when this loop runs successfully then check function is going to return 1
  8048711:	76 cf                	jbe    80486e2 <check+0x81>
  8048713:	b8 01 00 00 00       	mov    eax,0x1
 
 and if it returns 1 then it is going to give us the flag.:)


 so till now what we have the information 
 1)string has length greater than 13
 2) starts with word 'aqua'
 3)it should be palindrome
  so length should be greater than 4+14+1 = 19

 so let us make string 
  aquaaaaaaaaaaaaaaaaaaaaaauqa
	this string satisfies every requirement..

	let's check

amritesh@MyUbuntu:~/week8/week-8$ ./rev5-checker
Tell me something interesting:
aquaaaaaaaaaaaaaaaaaaaaaauqa
flag.txt not found. If you were running this against the remote server, you'd have the flag right now. If you are seeing this when connected to the server, something has gone horribly wrong, and you should contact the admins!


yeesss!!! we got it!

(flag.txt is there because i'm running it locally)
