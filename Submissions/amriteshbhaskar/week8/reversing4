It's the third level of the previous one

now let's objdump it and jump to the main fucntion

amritesh@MyUbuntu:~/week8/week-8$ objdump -d rev4-rrackme0x03 -M intel

08048498 <main>:
 8048498:	55                   	push   ebp
 8048499:	89 e5                	mov    ebp,esp
 804849b:	83 ec 18             	sub    esp,0x18
 804849e:	83 e4 f0             	and    esp,0xfffffff0
 80484a1:	b8 00 00 00 00       	mov    eax,0x0
 80484a6:	83 c0 0f             	add    eax,0xf
 80484a9:	83 c0 0f             	add    eax,0xf
 80484ac:	c1 e8 04             	shr    eax,0x4
 80484af:	c1 e0 04             	shl    eax,0x4
 80484b2:	29 c4                	sub    esp,eax
 80484b4:	c7 04 24 10 86 04 08 	mov    DWORD PTR [esp],0x8048610
 80484bb:	e8 90 fe ff ff       	call   8048350 <printf@plt>
 80484c0:	c7 04 24 29 86 04 08 	mov    DWORD PTR [esp],0x8048629
 80484c7:	e8 84 fe ff ff       	call   8048350 <printf@plt>
 80484cc:	8d 45 fc             	lea    eax,[ebp-0x4]
 80484cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80484d3:	c7 04 24 34 86 04 08 	mov    DWORD PTR [esp],0x8048634
 80484da:	e8 51 fe ff ff       	call   8048330 <scanf@plt>
 80484df:	c7 45 f8 5a 00 00 00 	mov    DWORD PTR [ebp-0x8],0x5a
 80484e6:	c7 45 f4 ec 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1ec
 80484ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
 80484f0:	8d 45 f8             	lea    eax,[ebp-0x8]
 80484f3:	01 10                	add    DWORD PTR [eax],edx
 80484f5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
 80484f8:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
 80484fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 80484ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 8048502:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048506:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
 8048509:	89 04 24             	mov    DWORD PTR [esp],eax
 804850c:	e8 5d ff ff ff       	call   804846e <test>
 8048511:	b8 00 00 00 00       	mov    eax,0x0
 8048516:	c9                   	leave
 8048517:	c3                   	ret

It's half of the code is same as the previous one like there is a variable(let's say num)  which has value 338724
but instead of comparing it is calling test function

 0804846e <test>:
 804846e:	55                   	push   ebp
 804846f:	89 e5                	mov    ebp,esp
 8048471:	83 ec 08             	sub    esp,0x8
 8048474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048477:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
 804847a:	74 0e                	je     804848a <test+0x1c>
 804847c:	c7 04 24 ec 85 04 08 	mov    DWORD PTR [esp],0x80485ec
 8048483:	e8 8c ff ff ff       	call   8048414 <shift>
 8048488:	eb 0c                	jmp    8048496 <test+0x28>
 804848a:	c7 04 24 fe 85 04 08 	mov    DWORD PTR [esp],0x80485fe
 8048491:	e8 7e ff ff ff       	call   8048414 <shift>
 8048496:	c9                   	leave
 8048497:	c3                   	ret

and here we can see it is comparing input with the num and if it is true then they are calling shift function
8048477:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]

let's check whether the answer is num(338724) or not

amritesh@MyUbuntu:~/week8/week-8$ ./rev4-rrackme0x03
IOLI Crackme Level 0x03
Password: 338724
Password OK!!! :)

yeah, cracked it!!! same password

